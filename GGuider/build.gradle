apply plugin: 'java'
//gradle war
apply plugin: 'war'
apply plugin: 'eclipse'
//apply plugin: 'eclipse-wtp'
//jettyRun	compile	JettyRun	Starts a Jetty instance and deploys the exploded web application to it.
//jettyRunWar	war	JettyRunWar	Starts a Jetty instance and deploys the WAR to it.
//jettyStop 	Stops the Jetty instance.
//apply plugin: 'jetty'
//gradle install
apply plugin: 'maven'

//创建二进制发布文件
//apply plugin: 'application'

apply plugin: 'org.akhikhl.gretty'

//buildscript中的声明是gradle脚本自身需要使用的资源。
//可以声明的资源包括依赖项、第三方插件、maven仓库地址等。而在build.gradle文件中直接声明的依赖项、仓库地址等信息是项目自身需要的资源。
//些插件、类库又不是直接服务于项目的，而是支持其它build脚本的运行。所以你应当将这部分的引用放置在buildscript代码块中。
//gradle在执行脚本时，会优先执行buildscript代码块中的内容，然后才会执行剩余的build脚本
buildscript {
	repositories{
		mavenCentral()
	}
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:+'
    }
}

gretty {
    port = 8080
    contextPath = '/'
    servletContainer = 'jetty9'
}

sourceCompatibility = 1.8
version = '1.0'
//设置编码
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
jar {
    manifest {
        attributes 'Implementation-Title': 'Base Gradle Framework',
                   'Implementation-Version': version
    }
}

configurations {
    deployerJars
    mybatisGenerator
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile 'net.coobird:thumbnailator:0.4.8'
    compile ('commons-io:commons-io:2.4')
    
    testCompile group: 'junit', name: 'junit', version: '4.+'
    
    providedCompile 'javax.servlet:servlet-api:2.5'
    
    mybatisGenerator group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.2'
    mybatisGenerator group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'
    
    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
    
    //jar包依赖
	//单个文件
	//compile files('libs/xx.jar')
	//指定文件夹
	//compile fileTree(dir: 'libs', include: '*.jar')

	//模块依赖
	//compile project(':Media')
	
	//依赖so库
	//需要把*.so都放在lib/armeabi/*.so下，把lib文件夹用zip压缩重命名为armeabi.jar放在libs目录下,然后添加依赖
	//compile files('libs/armeabi.jar')
}

//定义在build.gradle中的ext块中。ext准确的说是Gradle领域对象的一个属性，我们可以将自定义的属性添加到ext对象上，Build.gradle中的其它代码片段可以使用。
ext{
	guestName='Bowen'
}

//发布jar需要
jar {
    manifest {
        attributes 'Main-Class': 'org.gradle.App'
    }
}

//hello world
task hello << {
     println guestName
     println "hello, $guestName"
}

task mybatisGenerate << {
    ext.destDir = new File(buildDir, '/mybatisFile/')
    destDir.mkdirs()
    ant.properties['targetProject'] = destDir.path
    ant.taskdef (
        name: 'mbgenerator',
        classname: 'org.mybatis.generator.ant.GeneratorAntTask',
        classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator (overwrite: true,configfile: 'exclude/generatorConfig.xml',verbose: true){
        propertyset {
            propertyref(name: 'targetProject')
        }
    }
}

test {
    systemProperties 'property': 'value'
}

//自动化部署，或持续集成，或install jar into maven repository
uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
       mavenDeployer {
            repository(url: "")
       }
       /*
       //Upload of file via SSH
       repositories.mavenDeployer {
	        configuration = configurations.deployerJars
	        repository(url: "scp://repos.mycompany.com/releases") {
	            authentication(userName: "me", password: "myPassword")
	        }
    	}
       */
    }
}