<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
	        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">

	<context:component-scan base-package="com.stem">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!--<context:annotation-config /> -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:configuration/common/jdbc.properties</value>
			</list>
		</property>
	</bean>
    
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
        init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />        
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${jdbc.maxActive}" />
        <!-- 最大空闲连接数 -->
        <!-- 
        <property name="maxIdle" value="${jdbc.maxIdle}" />
         -->
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${jdbc.minIdle}" />
        <!-- 配置获取连接等待超时的时间 -->     
        <property name="maxWait" value="${jdbc.maxWait}" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${jdbc.validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${jdbc.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />     
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                 
                                              监控统计用的filter:stat
                                             日志用的filter:log4j
                                                防御SQL注入的filter:wall -->
        <property name="filters" value="${jdbc.filters}" />       
    </bean>
	
   <!-- 配置druid监控spring jdbc -->
		<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />

		<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
			<!-- <property name="patterns">
				<list>
					<value>com.stem.controller.*</value>
				</list>
			</property> -->
		</bean>
		<aop:config proxy-target-class="true">
			<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
		</aop:config>
	
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation"
			value="classpath:configuration/orm/orm-configuration.xml">
		</property>
		<!--<property name="transactionFactory">
		   <bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" />
		</property>--> 
		<property name="mapperLocations" >  	
			<array>
				<value>classpath:mapper/*.xml</value>
			</array>	
		</property>
		<!-- 多个用逗号隔开 -->
		<property name="typeAliasesPackage" value="com.stem.entity"/>
		<property name="dataSource" ref="dataSource" />
		
		<!-- 分页 -->
		<property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageHelper">
		        <property name="properties">
		          <value>
		            dialect=mysql
		            reasonable=false
		          </value>
		        </property>
		      </bean>
		    </array>
	  </property>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" >    
		<constructor-arg index="0" ref="sqlSessionFactory"/> 
	</bean> 
	<!-- 找到接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
		<!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />-->
		<!--<property name="sqlSessionTemplateBeanName" value="sqlSessionFactory" /> -->
		<!-- 多个用逗号隔开 -->
		<property name="basePackage" value="com.stem.dao" />
	</bean>
	<!-- 使用注解方式的事务 -->  
	<!--<tx:annotation-driven transaction-manager="transactionManager" />  -->
	<!-- 事务配置 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="create*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />
			<tx:method name="insert*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />
			<tx:method name="add*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />
			<tx:method name="update*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />			
			<tx:method name="delete*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />	
			<tx:method name="do*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />
			<tx:method name="execute*" read-only="false"
				rollback-for="Exception" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	
	<!-- Service层Method切面 begin-->
	<!-- 事务配置 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="accountServicePointcut" expression="execution(* com.stem.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="accountServicePointcut" />
	</aop:config>
</beans>
